/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Chat {
  export type MessageStruct = {
    to: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    text: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type MessageStructOutput = [string, string, string, BigNumber] & {
    to: string;
    from: string;
    text: string;
    timestamp: BigNumber;
  };
}

export interface ChatInterface extends utils.Interface {
  functions: {
    "getConversations(address,address)": FunctionFragment;
    "getCorrespondents()": FunctionFragment;
    "post(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getConversations" | "getCorrespondents" | "post"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConversations",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCorrespondents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConversations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCorrespondents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;

  events: {};
}

export interface Chat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConversations(
      address1: PromiseOrValue<string>,
      address2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Chat.MessageStructOutput[]]>;

    getCorrespondents(overrides?: CallOverrides): Promise<[string[]]>;

    post(
      _to: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getConversations(
    address1: PromiseOrValue<string>,
    address2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Chat.MessageStructOutput[]>;

  getCorrespondents(overrides?: CallOverrides): Promise<string[]>;

  post(
    _to: PromiseOrValue<string>,
    _text: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getConversations(
      address1: PromiseOrValue<string>,
      address2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Chat.MessageStructOutput[]>;

    getCorrespondents(overrides?: CallOverrides): Promise<string[]>;

    post(
      _to: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getConversations(
      address1: PromiseOrValue<string>,
      address2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCorrespondents(overrides?: CallOverrides): Promise<BigNumber>;

    post(
      _to: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConversations(
      address1: PromiseOrValue<string>,
      address2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCorrespondents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    post(
      _to: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
